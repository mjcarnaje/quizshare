{"ast":null,"code":"import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport const CommentResponseFragmentDoc = gql`\n    fragment CommentResponse on Comment {\n  id\n  author {\n    id\n    username\n    email\n    avatar\n    profile {\n      name\n    }\n  }\n  text\n  created_at\n}\n    `;\nexport const QuizzesResponseFragmentDoc = gql`\n    fragment QuizzesResponse on Quiz {\n  id\n  title\n  description\n  quiz_photo\n  created_at\n  likes {\n    quiz_id\n    author_id\n  }\n  author {\n    id\n    username\n    email\n    avatar\n    profile {\n      name\n    }\n  }\n  isLiked\n  likesCount\n  commentsCount\n  takersCount\n  questionsCount\n}\n    `;\nexport const ResultResponseFragmentDoc = gql`\n    fragment ResultResponse on Result {\n  id\n  taker {\n    username\n    avatar\n    email\n    profile {\n      name\n    }\n  }\n  score\n  current_total_questions\n  answered_at\n}\n    `;\nexport const UserResponseFragmentDoc = gql`\n    fragment UserResponse on User {\n  id\n  username\n  email\n  avatar\n  cover_photo\n  created_at\n  updated_at\n  profile {\n    id\n    first_name\n    last_name\n    birthday\n    gender\n    name\n    country\n    bio\n    social\n  }\n}\n    `;\nexport const CheckAnswerDocument = gql`\n    mutation CheckAnswer($data: ChecksAnswerInput!) {\n  checkAnswer(data: $data) {\n    ...ResultResponse\n  }\n}\n    ${ResultResponseFragmentDoc}`;\n\n/**\n * __useCheckAnswerMutation__\n *\n * To run a mutation, you first call `useCheckAnswerMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCheckAnswerMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [checkAnswerMutation, { data, loading, error }] = useCheckAnswerMutation({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useCheckAnswerMutation(baseOptions) {\n  return Apollo.useMutation(CheckAnswerDocument, baseOptions);\n}\nexport const CreateCommentDocument = gql`\n    mutation CreateComment($text: String!, $quiz_id: Float!) {\n  createComment(text: $text, quiz_id: $quiz_id) {\n    id\n    author {\n      id\n      username\n      email\n      avatar\n    }\n    text\n    created_at\n  }\n}\n    `;\n\n/**\n * __useCreateCommentMutation__\n *\n * To run a mutation, you first call `useCreateCommentMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateCommentMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createCommentMutation, { data, loading, error }] = useCreateCommentMutation({\n *   variables: {\n *      text: // value for 'text'\n *      quiz_id: // value for 'quiz_id'\n *   },\n * });\n */\nexport function useCreateCommentMutation(baseOptions) {\n  return Apollo.useMutation(CreateCommentDocument, baseOptions);\n}\nexport const CreateQuizDocument = gql`\n    mutation CreateQuiz($title: String!, $description: String!, $quiz_photo: String, $questions: [QuestionInput!]!) {\n  createQuiz(\n    data: {title: $title, description: $description, quiz_photo: $quiz_photo, questions: $questions}\n  ) {\n    title\n    description\n    quiz_photo\n    questions {\n      question_id\n      question\n      question_photo\n      choices\n      answer\n      explanation\n      with_explanation\n      hint\n      with_hint\n    }\n  }\n}\n    `;\n\n/**\n * __useCreateQuizMutation__\n *\n * To run a mutation, you first call `useCreateQuizMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateQuizMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createQuizMutation, { data, loading, error }] = useCreateQuizMutation({\n *   variables: {\n *      title: // value for 'title'\n *      description: // value for 'description'\n *      quiz_photo: // value for 'quiz_photo'\n *      questions: // value for 'questions'\n *   },\n * });\n */\nexport function useCreateQuizMutation(baseOptions) {\n  return Apollo.useMutation(CreateQuizDocument, baseOptions);\n}\nexport const DeleteQuizDocument = gql`\n    mutation DeleteQuiz($quiz_id: Int!) {\n  deleteQuiz(quiz_id: $quiz_id)\n}\n    `;\n\n/**\n * __useDeleteQuizMutation__\n *\n * To run a mutation, you first call `useDeleteQuizMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteQuizMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteQuizMutation, { data, loading, error }] = useDeleteQuizMutation({\n *   variables: {\n *      quiz_id: // value for 'quiz_id'\n *   },\n * });\n */\nexport function useDeleteQuizMutation(baseOptions) {\n  return Apollo.useMutation(DeleteQuizDocument, baseOptions);\n}\nexport const LoginDocument = gql`\n    mutation Login($emailOrUsername: String!, $password: String!) {\n  login(data: {emailOrUsername: $emailOrUsername, password: $password}) {\n    ...UserResponse\n  }\n}\n    ${UserResponseFragmentDoc}`;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      emailOrUsername: // value for 'emailOrUsername'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions) {\n  return Apollo.useMutation(LoginDocument, baseOptions);\n}\nexport const LogoutDocument = gql`\n    mutation Logout {\n  logout\n}\n    `;\n\n/**\n * __useLogoutMutation__\n *\n * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLogoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [logoutMutation, { data, loading, error }] = useLogoutMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useLogoutMutation(baseOptions) {\n  return Apollo.useMutation(LogoutDocument, baseOptions);\n}\nexport const RegisterDocument = gql`\n    mutation Register($username: String!, $email: String!, $password: String!, $confirm_password: String!, $first_name: String!, $last_name: String!, $year: String!, $month: String!, $day: String!, $gender: String!) {\n  register(\n    data: {username: $username, email: $email, password: $password, confirm_password: $confirm_password, first_name: $first_name, last_name: $last_name, year: $year, month: $month, day: $day, gender: $gender}\n  ) {\n    ...UserResponse\n  }\n}\n    ${UserResponseFragmentDoc}`;\n\n/**\n * __useRegisterMutation__\n *\n * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerMutation, { data, loading, error }] = useRegisterMutation({\n *   variables: {\n *      username: // value for 'username'\n *      email: // value for 'email'\n *      password: // value for 'password'\n *      confirm_password: // value for 'confirm_password'\n *      first_name: // value for 'first_name'\n *      last_name: // value for 'last_name'\n *      year: // value for 'year'\n *      month: // value for 'month'\n *      day: // value for 'day'\n *      gender: // value for 'gender'\n *   },\n * });\n */\nexport function useRegisterMutation(baseOptions) {\n  return Apollo.useMutation(RegisterDocument, baseOptions);\n}\nexport const ToggleLikeDocument = gql`\n    mutation ToggleLike($quiz_id: Float!) {\n  toggleLike(quiz_id: $quiz_id)\n}\n    `;\n\n/**\n * __useToggleLikeMutation__\n *\n * To run a mutation, you first call `useToggleLikeMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useToggleLikeMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [toggleLikeMutation, { data, loading, error }] = useToggleLikeMutation({\n *   variables: {\n *      quiz_id: // value for 'quiz_id'\n *   },\n * });\n */\nexport function useToggleLikeMutation(baseOptions) {\n  return Apollo.useMutation(ToggleLikeDocument, baseOptions);\n}\nexport const UpdateAccountDocument = gql`\n    mutation UpdateAccount($data: UpdateAccountInput!) {\n  updateAccount(data: $data) {\n    ...UserResponse\n  }\n}\n    ${UserResponseFragmentDoc}`;\n\n/**\n * __useUpdateAccountMutation__\n *\n * To run a mutation, you first call `useUpdateAccountMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateAccountMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateAccountMutation, { data, loading, error }] = useUpdateAccountMutation({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useUpdateAccountMutation(baseOptions) {\n  return Apollo.useMutation(UpdateAccountDocument, baseOptions);\n}\nexport const UpdateProfileDocument = gql`\n    mutation UpdateProfile($data: UpdateProfileInput!) {\n  updateProfile(data: $data) {\n    ...UserResponse\n  }\n}\n    ${UserResponseFragmentDoc}`;\n\n/**\n * __useUpdateProfileMutation__\n *\n * To run a mutation, you first call `useUpdateProfileMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateProfileMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateProfileMutation, { data, loading, error }] = useUpdateProfileMutation({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useUpdateProfileMutation(baseOptions) {\n  return Apollo.useMutation(UpdateProfileDocument, baseOptions);\n}\nexport const UpdateQuizDocument = gql`\n    mutation UpdateQuiz($inputs: QuizInput!, $quiz_id: Float!) {\n  updateQuiz(inputs: $inputs, quiz_id: $quiz_id) {\n    title\n    description\n    quiz_photo\n    questions {\n      question_id\n      question\n      question_photo\n      choices\n      answer\n      explanation\n      with_explanation\n      hint\n      with_hint\n    }\n  }\n}\n    `;\n\n/**\n * __useUpdateQuizMutation__\n *\n * To run a mutation, you first call `useUpdateQuizMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateQuizMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateQuizMutation, { data, loading, error }] = useUpdateQuizMutation({\n *   variables: {\n *      inputs: // value for 'inputs'\n *      quiz_id: // value for 'quiz_id'\n *   },\n * });\n */\nexport function useUpdateQuizMutation(baseOptions) {\n  return Apollo.useMutation(UpdateQuizDocument, baseOptions);\n}\nexport const CommentsDocument = gql`\n    query Comments($limit: Int!, $cursor: String, $quiz_id: Int!) {\n  comments(limit: $limit, cursor: $cursor, quiz_id: $quiz_id) {\n    hasMore\n    comments {\n      ...CommentResponse\n    }\n  }\n}\n    ${CommentResponseFragmentDoc}`;\n/**\n * __useCommentsQuery__\n *\n * To run a query within a React component, call `useCommentsQuery` and pass it any options that fit your needs.\n * When your component renders, `useCommentsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCommentsQuery({\n *   variables: {\n *      limit: // value for 'limit'\n *      cursor: // value for 'cursor'\n *      quiz_id: // value for 'quiz_id'\n *   },\n * });\n */\n\nexport function useCommentsQuery(baseOptions) {\n  return Apollo.useQuery(CommentsDocument, baseOptions);\n}\nexport function useCommentsLazyQuery(baseOptions) {\n  return Apollo.useLazyQuery(CommentsDocument, baseOptions);\n}\nexport const MeDocument = gql`\n    query Me {\n  me {\n    ...UserResponse\n  }\n}\n    ${UserResponseFragmentDoc}`;\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useMeQuery(baseOptions) {\n  return Apollo.useQuery(MeDocument, baseOptions);\n}\nexport function useMeLazyQuery(baseOptions) {\n  return Apollo.useLazyQuery(MeDocument, baseOptions);\n}\nexport const MeQuizzesDocument = gql`\n    query MeQuizzes($limit: Int!, $cursor: String) {\n  meQuizzes(limit: $limit, cursor: $cursor) {\n    meHasMore\n    meQuizzes {\n      ...QuizzesResponse\n    }\n  }\n}\n    ${QuizzesResponseFragmentDoc}`;\n/**\n * __useMeQuizzesQuery__\n *\n * To run a query within a React component, call `useMeQuizzesQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuizzesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuizzesQuery({\n *   variables: {\n *      limit: // value for 'limit'\n *      cursor: // value for 'cursor'\n *   },\n * });\n */\n\nexport function useMeQuizzesQuery(baseOptions) {\n  return Apollo.useQuery(MeQuizzesDocument, baseOptions);\n}\nexport function useMeQuizzesLazyQuery(baseOptions) {\n  return Apollo.useLazyQuery(MeQuizzesDocument, baseOptions);\n}\nexport const QuestionsDocument = gql`\n    query Questions($quiz_id: Int!, $withAnswer: Boolean!) {\n  questions(quiz_id: $quiz_id) {\n    question_id\n    question\n    question_photo\n    choices\n    hint\n    with_hint\n    answer @include(if: $withAnswer)\n  }\n}\n    `;\n/**\n * __useQuestionsQuery__\n *\n * To run a query within a React component, call `useQuestionsQuery` and pass it any options that fit your needs.\n * When your component renders, `useQuestionsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useQuestionsQuery({\n *   variables: {\n *      quiz_id: // value for 'quiz_id'\n *      withAnswer: // value for 'withAnswer'\n *   },\n * });\n */\n\nexport function useQuestionsQuery(baseOptions) {\n  return Apollo.useQuery(QuestionsDocument, baseOptions);\n}\nexport function useQuestionsLazyQuery(baseOptions) {\n  return Apollo.useLazyQuery(QuestionsDocument, baseOptions);\n}\nexport const QuizToUpdateDocument = gql`\n    query QuizToUpdate($quiz_id: Int!) {\n  quizToUpdate(quiz_id: $quiz_id) {\n    title\n    description\n    quiz_photo\n    questions {\n      question_id\n      question\n      question_photo\n      choices\n      answer\n      explanation\n      with_explanation\n      hint\n      with_hint\n    }\n  }\n}\n    `;\n/**\n * __useQuizToUpdateQuery__\n *\n * To run a query within a React component, call `useQuizToUpdateQuery` and pass it any options that fit your needs.\n * When your component renders, `useQuizToUpdateQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useQuizToUpdateQuery({\n *   variables: {\n *      quiz_id: // value for 'quiz_id'\n *   },\n * });\n */\n\nexport function useQuizToUpdateQuery(baseOptions) {\n  return Apollo.useQuery(QuizToUpdateDocument, baseOptions);\n}\nexport function useQuizToUpdateLazyQuery(baseOptions) {\n  return Apollo.useLazyQuery(QuizToUpdateDocument, baseOptions);\n}\nexport const QuizzesDocument = gql`\n    query Quizzes($limit: Int!, $cursor: String) {\n  quizzes(limit: $limit, cursor: $cursor) {\n    hasMore\n    quizzes {\n      ...QuizzesResponse\n    }\n  }\n}\n    ${QuizzesResponseFragmentDoc}`;\n/**\n * __useQuizzesQuery__\n *\n * To run a query within a React component, call `useQuizzesQuery` and pass it any options that fit your needs.\n * When your component renders, `useQuizzesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useQuizzesQuery({\n *   variables: {\n *      limit: // value for 'limit'\n *      cursor: // value for 'cursor'\n *   },\n * });\n */\n\nexport function useQuizzesQuery(baseOptions) {\n  return Apollo.useQuery(QuizzesDocument, baseOptions);\n}\nexport function useQuizzesLazyQuery(baseOptions) {\n  return Apollo.useLazyQuery(QuizzesDocument, baseOptions);\n}\nexport const SingleQuizDocument = gql`\n    query SingleQuiz($quiz_id: Int!) {\n  singleQuiz(quiz_id: $quiz_id) {\n    id\n    quiz_photo\n    title\n    description\n    author {\n      id\n      username\n      avatar\n      email\n      profile {\n        name\n      }\n    }\n    isLiked\n    likesCount\n    commentsCount\n    created_at\n    questionsCount\n    takersCount\n    isTaken\n  }\n}\n    `;\n/**\n * __useSingleQuizQuery__\n *\n * To run a query within a React component, call `useSingleQuizQuery` and pass it any options that fit your needs.\n * When your component renders, `useSingleQuizQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useSingleQuizQuery({\n *   variables: {\n *      quiz_id: // value for 'quiz_id'\n *   },\n * });\n */\n\nexport function useSingleQuizQuery(baseOptions) {\n  return Apollo.useQuery(SingleQuizDocument, baseOptions);\n}\nexport function useSingleQuizLazyQuery(baseOptions) {\n  return Apollo.useLazyQuery(SingleQuizDocument, baseOptions);\n}","map":{"version":3,"sources":["C:/Users/mj/Documents/Codes/PROJECTS/quizshare-typescript/client/src/generated/graphql.tsx"],"names":["gql","Apollo","CommentResponseFragmentDoc","QuizzesResponseFragmentDoc","ResultResponseFragmentDoc","UserResponseFragmentDoc","CheckAnswerDocument","useCheckAnswerMutation","baseOptions","useMutation","CreateCommentDocument","useCreateCommentMutation","CreateQuizDocument","useCreateQuizMutation","DeleteQuizDocument","useDeleteQuizMutation","LoginDocument","useLoginMutation","LogoutDocument","useLogoutMutation","RegisterDocument","useRegisterMutation","ToggleLikeDocument","useToggleLikeMutation","UpdateAccountDocument","useUpdateAccountMutation","UpdateProfileDocument","useUpdateProfileMutation","UpdateQuizDocument","useUpdateQuizMutation","CommentsDocument","useCommentsQuery","useQuery","useCommentsLazyQuery","useLazyQuery","MeDocument","useMeQuery","useMeLazyQuery","MeQuizzesDocument","useMeQuizzesQuery","useMeQuizzesLazyQuery","QuestionsDocument","useQuestionsQuery","useQuestionsLazyQuery","QuizToUpdateDocument","useQuizToUpdateQuery","useQuizToUpdateLazyQuery","QuizzesDocument","useQuizzesQuery","useQuizzesLazyQuery","SingleQuizDocument","useSingleQuizQuery","useSingleQuizLazyQuery"],"mappings":"AAAA,SAASA,GAAT,QAAoB,gBAApB;AACA,OAAO,KAAKC,MAAZ,MAAwB,gBAAxB;AA0oBA,OAAO,MAAMC,0BAA0B,GAAGF,GAAI;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAfO;AAgBP,OAAO,MAAMG,0BAA0B,GAAGH,GAAI;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KA1BO;AA2BP,OAAO,MAAMI,yBAAyB,GAAGJ,GAAI;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAfO;AAgBP,OAAO,MAAMK,uBAAuB,GAAGL,GAAI;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KArBO;AAsBP,OAAO,MAAMM,mBAAmB,GAAGN,GAAI;AACvC;AACA;AACA;AACA;AACA;AACA,MAAMI,yBAA0B,EANzB;;AASP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASG,sBAAT,CAAgCC,WAAhC,EAA6H;AAC5H,SAAOP,MAAM,CAACQ,WAAP,CAAsEH,mBAAtE,EAA2FE,WAA3F,CAAP;AACD;AAIP,OAAO,MAAME,qBAAqB,GAAGV,GAAI;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAdO;;AAiBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASW,wBAAT,CAAkCH,WAAlC,EAAmI;AAClI,SAAOP,MAAM,CAACQ,WAAP,CAA0EC,qBAA1E,EAAiGF,WAAjG,CAAP;AACD;AAIP,OAAO,MAAMI,kBAAkB,GAAGZ,GAAI;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KArBO;;AAwBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASa,qBAAT,CAA+BL,WAA/B,EAA0H;AACzH,SAAOP,MAAM,CAACQ,WAAP,CAAoEG,kBAApE,EAAwFJ,WAAxF,CAAP;AACD;AAIP,OAAO,MAAMM,kBAAkB,GAAGd,GAAI;AACtC;AACA;AACA;AACA,KAJO;;AAOP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASe,qBAAT,CAA+BP,WAA/B,EAA0H;AACzH,SAAOP,MAAM,CAACQ,WAAP,CAAoEK,kBAApE,EAAwFN,WAAxF,CAAP;AACD;AAIP,OAAO,MAAMQ,aAAa,GAAGhB,GAAI;AACjC;AACA;AACA;AACA;AACA;AACA,MAAMK,uBAAwB,EANvB;;AASP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASY,gBAAT,CAA0BT,WAA1B,EAA2G;AAC1G,SAAOP,MAAM,CAACQ,WAAP,CAA0DO,aAA1D,EAAyER,WAAzE,CAAP;AACD;AAIP,OAAO,MAAMU,cAAc,GAAGlB,GAAI;AAClC;AACA;AACA;AACA,KAJO;;AAOP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASmB,iBAAT,CAA2BX,WAA3B,EAA8G;AAC7G,SAAOP,MAAM,CAACQ,WAAP,CAA4DS,cAA5D,EAA4EV,WAA5E,CAAP;AACD;AAIP,OAAO,MAAMY,gBAAgB,GAAGpB,GAAI;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMK,uBAAwB,EARvB;;AAWP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASgB,mBAAT,CAA6Bb,WAA7B,EAAoH;AACnH,SAAOP,MAAM,CAACQ,WAAP,CAAgEW,gBAAhE,EAAkFZ,WAAlF,CAAP;AACD;AAIP,OAAO,MAAMc,kBAAkB,GAAGtB,GAAI;AACtC;AACA;AACA;AACA,KAJO;;AAOP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASuB,qBAAT,CAA+Bf,WAA/B,EAA0H;AACzH,SAAOP,MAAM,CAACQ,WAAP,CAAoEa,kBAApE,EAAwFd,WAAxF,CAAP;AACD;AAIP,OAAO,MAAMgB,qBAAqB,GAAGxB,GAAI;AACzC;AACA;AACA;AACA;AACA;AACA,MAAMK,uBAAwB,EANvB;;AASP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASoB,wBAAT,CAAkCjB,WAAlC,EAAmI;AAClI,SAAOP,MAAM,CAACQ,WAAP,CAA0Ee,qBAA1E,EAAiGhB,WAAjG,CAAP;AACD;AAIP,OAAO,MAAMkB,qBAAqB,GAAG1B,GAAI;AACzC;AACA;AACA;AACA;AACA;AACA,MAAMK,uBAAwB,EANvB;;AASP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASsB,wBAAT,CAAkCnB,WAAlC,EAAmI;AAClI,SAAOP,MAAM,CAACQ,WAAP,CAA0EiB,qBAA1E,EAAiGlB,WAAjG,CAAP;AACD;AAIP,OAAO,MAAMoB,kBAAkB,GAAG5B,GAAI;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAnBO;;AAsBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAAS6B,qBAAT,CAA+BrB,WAA/B,EAA0H;AACzH,SAAOP,MAAM,CAACQ,WAAP,CAAoEmB,kBAApE,EAAwFpB,WAAxF,CAAP;AACD;AAIP,OAAO,MAAMsB,gBAAgB,GAAG9B,GAAI;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,0BAA2B,EAT1B;AAWP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS6B,gBAAT,CAA0BvB,WAA1B,EAAuG;AACtG,SAAOP,MAAM,CAAC+B,QAAP,CAAuDF,gBAAvD,EAAyEtB,WAAzE,CAAP;AACD;AACP,OAAO,SAASyB,oBAAT,CAA8BzB,WAA9B,EAAgH;AAC7G,SAAOP,MAAM,CAACiC,YAAP,CAA2DJ,gBAA3D,EAA6EtB,WAA7E,CAAP;AACD;AAIT,OAAO,MAAM2B,UAAU,GAAGnC,GAAI;AAC9B;AACA;AACA;AACA;AACA;AACA,MAAMK,uBAAwB,EANvB;AAQP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS+B,UAAT,CAAoB5B,WAApB,EAAsF;AACrF,SAAOP,MAAM,CAAC+B,QAAP,CAA2CG,UAA3C,EAAuD3B,WAAvD,CAAP;AACD;AACP,OAAO,SAAS6B,cAAT,CAAwB7B,WAAxB,EAA8F;AAC3F,SAAOP,MAAM,CAACiC,YAAP,CAA+CC,UAA/C,EAA2D3B,WAA3D,CAAP;AACD;AAIT,OAAO,MAAM8B,iBAAiB,GAAGtC,GAAI;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMG,0BAA2B,EAT1B;AAWP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASoC,iBAAT,CAA2B/B,WAA3B,EAA0G;AACzG,SAAOP,MAAM,CAAC+B,QAAP,CAAyDM,iBAAzD,EAA4E9B,WAA5E,CAAP;AACD;AACP,OAAO,SAASgC,qBAAT,CAA+BhC,WAA/B,EAAmH;AAChH,SAAOP,MAAM,CAACiC,YAAP,CAA6DI,iBAA7D,EAAgF9B,WAAhF,CAAP;AACD;AAIT,OAAO,MAAMiC,iBAAiB,GAAGzC,GAAI;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAZO;AAcP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS0C,iBAAT,CAA2BlC,WAA3B,EAA0G;AACzG,SAAOP,MAAM,CAAC+B,QAAP,CAAyDS,iBAAzD,EAA4EjC,WAA5E,CAAP;AACD;AACP,OAAO,SAASmC,qBAAT,CAA+BnC,WAA/B,EAAmH;AAChH,SAAOP,MAAM,CAACiC,YAAP,CAA6DO,iBAA7D,EAAgFjC,WAAhF,CAAP;AACD;AAIT,OAAO,MAAMoC,oBAAoB,GAAG5C,GAAI;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAnBO;AAqBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS6C,oBAAT,CAA8BrC,WAA9B,EAAmH;AAClH,SAAOP,MAAM,CAAC+B,QAAP,CAA+DY,oBAA/D,EAAqFpC,WAArF,CAAP;AACD;AACP,OAAO,SAASsC,wBAAT,CAAkCtC,WAAlC,EAA4H;AACzH,SAAOP,MAAM,CAACiC,YAAP,CAAmEU,oBAAnE,EAAyFpC,WAAzF,CAAP;AACD;AAIT,OAAO,MAAMuC,eAAe,GAAG/C,GAAI;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMG,0BAA2B,EAT1B;AAWP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS6C,eAAT,CAAyBxC,WAAzB,EAAoG;AACnG,SAAOP,MAAM,CAAC+B,QAAP,CAAqDe,eAArD,EAAsEvC,WAAtE,CAAP;AACD;AACP,OAAO,SAASyC,mBAAT,CAA6BzC,WAA7B,EAA6G;AAC1G,SAAOP,MAAM,CAACiC,YAAP,CAAyDa,eAAzD,EAA0EvC,WAA1E,CAAP;AACD;AAIT,OAAO,MAAM0C,kBAAkB,GAAGlD,GAAI;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAzBO;AA2BP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASmD,kBAAT,CAA4B3C,WAA5B,EAA6G;AAC5G,SAAOP,MAAM,CAAC+B,QAAP,CAA2DkB,kBAA3D,EAA+E1C,WAA/E,CAAP;AACD;AACP,OAAO,SAAS4C,sBAAT,CAAgC5C,WAAhC,EAAsH;AACnH,SAAOP,MAAM,CAACiC,YAAP,CAA+DgB,kBAA/D,EAAmF1C,WAAnF,CAAP;AACD","sourcesContent":["import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */\n  JSONObject: any;\n};\n\nexport type Question = {\n  __typename?: 'Question';\n  id: Scalars['ID'];\n  question_id: Scalars['String'];\n  question: Scalars['String'];\n  question_photo?: Maybe<Scalars['String']>;\n  choices: Array<Scalars['JSONObject']>;\n  answer: Scalars['String'];\n  explanation?: Maybe<Scalars['String']>;\n  with_explanation: Scalars['Boolean'];\n  hint?: Maybe<Scalars['String']>;\n  with_hint: Scalars['Boolean'];\n};\n\n\nexport type Like = {\n  __typename?: 'Like';\n  quiz_id: Scalars['Float'];\n  author_id: Scalars['Float'];\n  author: User;\n  created_at: Scalars['String'];\n};\n\nexport type Profile = {\n  __typename?: 'Profile';\n  id: Scalars['ID'];\n  first_name: Scalars['String'];\n  last_name: Scalars['String'];\n  birthday: Scalars['String'];\n  gender: Scalars['String'];\n  country?: Maybe<Scalars['String']>;\n  bio?: Maybe<Scalars['String']>;\n  social?: Maybe<Scalars['JSONObject']>;\n  name: Scalars['String'];\n};\n\nexport type Result = {\n  __typename?: 'Result';\n  id: Scalars['ID'];\n  taker: User;\n  score: Scalars['Float'];\n  current_total_questions: Scalars['Float'];\n  answered_at: Scalars['String'];\n};\n\nexport type User = {\n  __typename?: 'User';\n  id: Scalars['ID'];\n  username: Scalars['String'];\n  email: Scalars['String'];\n  avatar?: Maybe<Scalars['String']>;\n  cover_photo?: Maybe<Scalars['String']>;\n  created_at: Scalars['String'];\n  updated_at: Scalars['String'];\n  profile: Profile;\n};\n\nexport type Quiz = {\n  __typename?: 'Quiz';\n  id: Scalars['ID'];\n  author_id: Scalars['Float'];\n  author: User;\n  title: Scalars['String'];\n  description: Scalars['String'];\n  quiz_photo?: Maybe<Scalars['String']>;\n  questions: Array<Question>;\n  takers: Array<Result>;\n  takersCount: Scalars['Int'];\n  isTaken: Scalars['Boolean'];\n  likes: Array<Like>;\n  isLiked: Scalars['Boolean'];\n  likesCount: Scalars['Int'];\n  comments: Array<Comment>;\n  commentsCount: Scalars['Int'];\n  created_at: Scalars['String'];\n  updated_at: Scalars['String'];\n  questionsCount: Scalars['Int'];\n};\n\nexport type Comment = {\n  __typename?: 'Comment';\n  id: Scalars['ID'];\n  author: User;\n  text: Scalars['String'];\n  created_at: Scalars['String'];\n};\n\nexport type PaginatedQuizzes = {\n  __typename?: 'PaginatedQuizzes';\n  quizzes: Array<Quiz>;\n  hasMore: Scalars['Boolean'];\n};\n\nexport type PaginatedMeQuizzes = {\n  __typename?: 'PaginatedMeQuizzes';\n  meQuizzes: Array<Quiz>;\n  meHasMore: Scalars['Boolean'];\n};\n\nexport type PaginatedComments = {\n  __typename?: 'PaginatedComments';\n  comments: Array<Comment>;\n  hasMore: Scalars['Boolean'];\n};\n\nexport type UsersAnswer = {\n  question_id: Scalars['String'];\n  choice_id: Scalars['String'];\n};\n\nexport type ChecksAnswerInput = {\n  quiz_id: Scalars['Float'];\n  users_answer: Array<UsersAnswer>;\n};\n\nexport type ChoiceInput = {\n  choice_id: Scalars['String'];\n  value: Scalars['String'];\n  choicePhoto?: Maybe<Scalars['String']>;\n};\n\nexport type QuestionInput = {\n  question_id: Scalars['ID'];\n  question: Scalars['String'];\n  question_photo?: Maybe<Scalars['String']>;\n  choices: Array<ChoiceInput>;\n  answer: Scalars['String'];\n  explanation?: Maybe<Scalars['String']>;\n  with_explanation?: Maybe<Scalars['Boolean']>;\n  hint?: Maybe<Scalars['String']>;\n  with_hint?: Maybe<Scalars['Boolean']>;\n};\n\nexport type QuizInput = {\n  title: Scalars['String'];\n  description: Scalars['String'];\n  quiz_photo?: Maybe<Scalars['String']>;\n  questions: Array<QuestionInput>;\n};\n\nexport type LoginInput = {\n  emailOrUsername: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type RegisterInput = {\n  username: Scalars['String'];\n  email: Scalars['String'];\n  password: Scalars['String'];\n  confirm_password: Scalars['String'];\n  first_name: Scalars['String'];\n  last_name: Scalars['String'];\n  year: Scalars['String'];\n  month: Scalars['String'];\n  day: Scalars['String'];\n  gender: Scalars['String'];\n};\n\nexport type UpdateAccountInput = {\n  username?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n  confirm_password?: Maybe<Scalars['String']>;\n  avatar?: Maybe<Scalars['String']>;\n  cover_photo?: Maybe<Scalars['String']>;\n};\n\nexport type SocialInput = {\n  facebook: Scalars['String'];\n  twitter: Scalars['String'];\n  instagram: Scalars['String'];\n  youtube: Scalars['String'];\n};\n\nexport type UpdateProfileInput = {\n  first_name: Scalars['String'];\n  last_name: Scalars['String'];\n  bio?: Maybe<Scalars['String']>;\n  year: Scalars['String'];\n  month: Scalars['String'];\n  day: Scalars['String'];\n  country?: Maybe<Scalars['String']>;\n  social?: Maybe<SocialInput>;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  quizzes: PaginatedQuizzes;\n  meQuizzes: PaginatedMeQuizzes;\n  quizToUpdate: Quiz;\n  singleQuiz?: Maybe<Quiz>;\n  questions?: Maybe<Array<Question>>;\n  comments?: Maybe<PaginatedComments>;\n  me?: Maybe<User>;\n  getUsers: Array<User>;\n};\n\n\nexport type QueryQuizzesArgs = {\n  cursor?: Maybe<Scalars['String']>;\n  limit: Scalars['Int'];\n};\n\n\nexport type QueryMeQuizzesArgs = {\n  cursor?: Maybe<Scalars['String']>;\n  limit: Scalars['Int'];\n};\n\n\nexport type QueryQuizToUpdateArgs = {\n  quiz_id: Scalars['Int'];\n};\n\n\nexport type QuerySingleQuizArgs = {\n  quiz_id: Scalars['Int'];\n};\n\n\nexport type QueryQuestionsArgs = {\n  quiz_id: Scalars['Int'];\n};\n\n\nexport type QueryCommentsArgs = {\n  cursor?: Maybe<Scalars['String']>;\n  limit: Scalars['Int'];\n  quiz_id: Scalars['Int'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  checkAnswer?: Maybe<Result>;\n  createComment: Comment;\n  createQuiz: Quiz;\n  deleteComment: Scalars['String'];\n  deleteQuiz: Scalars['String'];\n  toggleLike: Scalars['String'];\n  updateQuiz: Quiz;\n  deleteUser: Scalars['String'];\n  login?: Maybe<User>;\n  logout: Scalars['Boolean'];\n  register: User;\n  updateAccount: User;\n  updateProfile?: Maybe<User>;\n};\n\n\nexport type MutationCheckAnswerArgs = {\n  data: ChecksAnswerInput;\n};\n\n\nexport type MutationCreateCommentArgs = {\n  text: Scalars['String'];\n  quiz_id: Scalars['Float'];\n};\n\n\nexport type MutationCreateQuizArgs = {\n  data: QuizInput;\n};\n\n\nexport type MutationDeleteCommentArgs = {\n  commentId: Scalars['Float'];\n  quiz_id: Scalars['Float'];\n};\n\n\nexport type MutationDeleteQuizArgs = {\n  quiz_id: Scalars['Int'];\n};\n\n\nexport type MutationToggleLikeArgs = {\n  quiz_id: Scalars['Float'];\n};\n\n\nexport type MutationUpdateQuizArgs = {\n  inputs: QuizInput;\n  quiz_id: Scalars['Float'];\n};\n\n\nexport type MutationLoginArgs = {\n  data: LoginInput;\n};\n\n\nexport type MutationRegisterArgs = {\n  data: RegisterInput;\n};\n\n\nexport type MutationUpdateAccountArgs = {\n  data: UpdateAccountInput;\n};\n\n\nexport type MutationUpdateProfileArgs = {\n  data: UpdateProfileInput;\n};\n\nexport type CommentResponseFragment = (\n  { __typename?: 'Comment' }\n  & Pick<Comment, 'id' | 'text' | 'created_at'>\n  & { author: (\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'username' | 'email' | 'avatar'>\n    & { profile: (\n      { __typename?: 'Profile' }\n      & Pick<Profile, 'name'>\n    ) }\n  ) }\n);\n\nexport type QuizzesResponseFragment = (\n  { __typename?: 'Quiz' }\n  & Pick<Quiz, 'id' | 'title' | 'description' | 'quiz_photo' | 'created_at' | 'isLiked' | 'likesCount' | 'commentsCount' | 'takersCount' | 'questionsCount'>\n  & { likes: Array<(\n    { __typename?: 'Like' }\n    & Pick<Like, 'quiz_id' | 'author_id'>\n  )>, author: (\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'username' | 'email' | 'avatar'>\n    & { profile: (\n      { __typename?: 'Profile' }\n      & Pick<Profile, 'name'>\n    ) }\n  ) }\n);\n\nexport type ResultResponseFragment = (\n  { __typename?: 'Result' }\n  & Pick<Result, 'id' | 'score' | 'current_total_questions' | 'answered_at'>\n  & { taker: (\n    { __typename?: 'User' }\n    & Pick<User, 'username' | 'avatar' | 'email'>\n    & { profile: (\n      { __typename?: 'Profile' }\n      & Pick<Profile, 'name'>\n    ) }\n  ) }\n);\n\nexport type UserResponseFragment = (\n  { __typename?: 'User' }\n  & Pick<User, 'id' | 'username' | 'email' | 'avatar' | 'cover_photo' | 'created_at' | 'updated_at'>\n  & { profile: (\n    { __typename?: 'Profile' }\n    & Pick<Profile, 'id' | 'first_name' | 'last_name' | 'birthday' | 'gender' | 'name' | 'country' | 'bio' | 'social'>\n  ) }\n);\n\nexport type CheckAnswerMutationVariables = Exact<{\n  data: ChecksAnswerInput;\n}>;\n\n\nexport type CheckAnswerMutation = (\n  { __typename?: 'Mutation' }\n  & { checkAnswer?: Maybe<(\n    { __typename?: 'Result' }\n    & ResultResponseFragment\n  )> }\n);\n\nexport type CreateCommentMutationVariables = Exact<{\n  text: Scalars['String'];\n  quiz_id: Scalars['Float'];\n}>;\n\n\nexport type CreateCommentMutation = (\n  { __typename?: 'Mutation' }\n  & { createComment: (\n    { __typename?: 'Comment' }\n    & Pick<Comment, 'id' | 'text' | 'created_at'>\n    & { author: (\n      { __typename?: 'User' }\n      & Pick<User, 'id' | 'username' | 'email' | 'avatar'>\n    ) }\n  ) }\n);\n\nexport type CreateQuizMutationVariables = Exact<{\n  title: Scalars['String'];\n  description: Scalars['String'];\n  quiz_photo?: Maybe<Scalars['String']>;\n  questions: Array<QuestionInput>;\n}>;\n\n\nexport type CreateQuizMutation = (\n  { __typename?: 'Mutation' }\n  & { createQuiz: (\n    { __typename?: 'Quiz' }\n    & Pick<Quiz, 'title' | 'description' | 'quiz_photo'>\n    & { questions: Array<(\n      { __typename?: 'Question' }\n      & Pick<Question, 'question_id' | 'question' | 'question_photo' | 'choices' | 'answer' | 'explanation' | 'with_explanation' | 'hint' | 'with_hint'>\n    )> }\n  ) }\n);\n\nexport type DeleteQuizMutationVariables = Exact<{\n  quiz_id: Scalars['Int'];\n}>;\n\n\nexport type DeleteQuizMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteQuiz'>\n);\n\nexport type LoginMutationVariables = Exact<{\n  emailOrUsername: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\n\nexport type LoginMutation = (\n  { __typename?: 'Mutation' }\n  & { login?: Maybe<(\n    { __typename?: 'User' }\n    & UserResponseFragment\n  )> }\n);\n\nexport type LogoutMutationVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type LogoutMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'logout'>\n);\n\nexport type RegisterMutationVariables = Exact<{\n  username: Scalars['String'];\n  email: Scalars['String'];\n  password: Scalars['String'];\n  confirm_password: Scalars['String'];\n  first_name: Scalars['String'];\n  last_name: Scalars['String'];\n  year: Scalars['String'];\n  month: Scalars['String'];\n  day: Scalars['String'];\n  gender: Scalars['String'];\n}>;\n\n\nexport type RegisterMutation = (\n  { __typename?: 'Mutation' }\n  & { register: (\n    { __typename?: 'User' }\n    & UserResponseFragment\n  ) }\n);\n\nexport type ToggleLikeMutationVariables = Exact<{\n  quiz_id: Scalars['Float'];\n}>;\n\n\nexport type ToggleLikeMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'toggleLike'>\n);\n\nexport type UpdateAccountMutationVariables = Exact<{\n  data: UpdateAccountInput;\n}>;\n\n\nexport type UpdateAccountMutation = (\n  { __typename?: 'Mutation' }\n  & { updateAccount: (\n    { __typename?: 'User' }\n    & UserResponseFragment\n  ) }\n);\n\nexport type UpdateProfileMutationVariables = Exact<{\n  data: UpdateProfileInput;\n}>;\n\n\nexport type UpdateProfileMutation = (\n  { __typename?: 'Mutation' }\n  & { updateProfile?: Maybe<(\n    { __typename?: 'User' }\n    & UserResponseFragment\n  )> }\n);\n\nexport type UpdateQuizMutationVariables = Exact<{\n  inputs: QuizInput;\n  quiz_id: Scalars['Float'];\n}>;\n\n\nexport type UpdateQuizMutation = (\n  { __typename?: 'Mutation' }\n  & { updateQuiz: (\n    { __typename?: 'Quiz' }\n    & Pick<Quiz, 'title' | 'description' | 'quiz_photo'>\n    & { questions: Array<(\n      { __typename?: 'Question' }\n      & Pick<Question, 'question_id' | 'question' | 'question_photo' | 'choices' | 'answer' | 'explanation' | 'with_explanation' | 'hint' | 'with_hint'>\n    )> }\n  ) }\n);\n\nexport type CommentsQueryVariables = Exact<{\n  limit: Scalars['Int'];\n  cursor?: Maybe<Scalars['String']>;\n  quiz_id: Scalars['Int'];\n}>;\n\n\nexport type CommentsQuery = (\n  { __typename?: 'Query' }\n  & { comments?: Maybe<(\n    { __typename?: 'PaginatedComments' }\n    & Pick<PaginatedComments, 'hasMore'>\n    & { comments: Array<(\n      { __typename?: 'Comment' }\n      & CommentResponseFragment\n    )> }\n  )> }\n);\n\nexport type MeQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type MeQuery = (\n  { __typename?: 'Query' }\n  & { me?: Maybe<(\n    { __typename?: 'User' }\n    & UserResponseFragment\n  )> }\n);\n\nexport type MeQuizzesQueryVariables = Exact<{\n  limit: Scalars['Int'];\n  cursor?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type MeQuizzesQuery = (\n  { __typename?: 'Query' }\n  & { meQuizzes: (\n    { __typename?: 'PaginatedMeQuizzes' }\n    & Pick<PaginatedMeQuizzes, 'meHasMore'>\n    & { meQuizzes: Array<(\n      { __typename?: 'Quiz' }\n      & QuizzesResponseFragment\n    )> }\n  ) }\n);\n\nexport type QuestionsQueryVariables = Exact<{\n  quiz_id: Scalars['Int'];\n  withAnswer: Scalars['Boolean'];\n}>;\n\n\nexport type QuestionsQuery = (\n  { __typename?: 'Query' }\n  & { questions?: Maybe<Array<(\n    { __typename?: 'Question' }\n    & MakeOptional<Pick<Question, 'question_id' | 'question' | 'question_photo' | 'choices' | 'hint' | 'with_hint' | 'answer'>, 'answer'>\n  )>> }\n);\n\nexport type QuizToUpdateQueryVariables = Exact<{\n  quiz_id: Scalars['Int'];\n}>;\n\n\nexport type QuizToUpdateQuery = (\n  { __typename?: 'Query' }\n  & { quizToUpdate: (\n    { __typename?: 'Quiz' }\n    & Pick<Quiz, 'title' | 'description' | 'quiz_photo'>\n    & { questions: Array<(\n      { __typename?: 'Question' }\n      & Pick<Question, 'question_id' | 'question' | 'question_photo' | 'choices' | 'answer' | 'explanation' | 'with_explanation' | 'hint' | 'with_hint'>\n    )> }\n  ) }\n);\n\nexport type QuizzesQueryVariables = Exact<{\n  limit: Scalars['Int'];\n  cursor?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type QuizzesQuery = (\n  { __typename?: 'Query' }\n  & { quizzes: (\n    { __typename?: 'PaginatedQuizzes' }\n    & Pick<PaginatedQuizzes, 'hasMore'>\n    & { quizzes: Array<(\n      { __typename?: 'Quiz' }\n      & QuizzesResponseFragment\n    )> }\n  ) }\n);\n\nexport type SingleQuizQueryVariables = Exact<{\n  quiz_id: Scalars['Int'];\n}>;\n\n\nexport type SingleQuizQuery = (\n  { __typename?: 'Query' }\n  & { singleQuiz?: Maybe<(\n    { __typename?: 'Quiz' }\n    & Pick<Quiz, 'id' | 'quiz_photo' | 'title' | 'description' | 'isLiked' | 'likesCount' | 'commentsCount' | 'created_at' | 'questionsCount' | 'takersCount' | 'isTaken'>\n    & { author: (\n      { __typename?: 'User' }\n      & Pick<User, 'id' | 'username' | 'avatar' | 'email'>\n      & { profile: (\n        { __typename?: 'Profile' }\n        & Pick<Profile, 'name'>\n      ) }\n    ) }\n  )> }\n);\n\nexport const CommentResponseFragmentDoc = gql`\n    fragment CommentResponse on Comment {\n  id\n  author {\n    id\n    username\n    email\n    avatar\n    profile {\n      name\n    }\n  }\n  text\n  created_at\n}\n    `;\nexport const QuizzesResponseFragmentDoc = gql`\n    fragment QuizzesResponse on Quiz {\n  id\n  title\n  description\n  quiz_photo\n  created_at\n  likes {\n    quiz_id\n    author_id\n  }\n  author {\n    id\n    username\n    email\n    avatar\n    profile {\n      name\n    }\n  }\n  isLiked\n  likesCount\n  commentsCount\n  takersCount\n  questionsCount\n}\n    `;\nexport const ResultResponseFragmentDoc = gql`\n    fragment ResultResponse on Result {\n  id\n  taker {\n    username\n    avatar\n    email\n    profile {\n      name\n    }\n  }\n  score\n  current_total_questions\n  answered_at\n}\n    `;\nexport const UserResponseFragmentDoc = gql`\n    fragment UserResponse on User {\n  id\n  username\n  email\n  avatar\n  cover_photo\n  created_at\n  updated_at\n  profile {\n    id\n    first_name\n    last_name\n    birthday\n    gender\n    name\n    country\n    bio\n    social\n  }\n}\n    `;\nexport const CheckAnswerDocument = gql`\n    mutation CheckAnswer($data: ChecksAnswerInput!) {\n  checkAnswer(data: $data) {\n    ...ResultResponse\n  }\n}\n    ${ResultResponseFragmentDoc}`;\nexport type CheckAnswerMutationFn = Apollo.MutationFunction<CheckAnswerMutation, CheckAnswerMutationVariables>;\n\n/**\n * __useCheckAnswerMutation__\n *\n * To run a mutation, you first call `useCheckAnswerMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCheckAnswerMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [checkAnswerMutation, { data, loading, error }] = useCheckAnswerMutation({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useCheckAnswerMutation(baseOptions?: Apollo.MutationHookOptions<CheckAnswerMutation, CheckAnswerMutationVariables>) {\n        return Apollo.useMutation<CheckAnswerMutation, CheckAnswerMutationVariables>(CheckAnswerDocument, baseOptions);\n      }\nexport type CheckAnswerMutationHookResult = ReturnType<typeof useCheckAnswerMutation>;\nexport type CheckAnswerMutationResult = Apollo.MutationResult<CheckAnswerMutation>;\nexport type CheckAnswerMutationOptions = Apollo.BaseMutationOptions<CheckAnswerMutation, CheckAnswerMutationVariables>;\nexport const CreateCommentDocument = gql`\n    mutation CreateComment($text: String!, $quiz_id: Float!) {\n  createComment(text: $text, quiz_id: $quiz_id) {\n    id\n    author {\n      id\n      username\n      email\n      avatar\n    }\n    text\n    created_at\n  }\n}\n    `;\nexport type CreateCommentMutationFn = Apollo.MutationFunction<CreateCommentMutation, CreateCommentMutationVariables>;\n\n/**\n * __useCreateCommentMutation__\n *\n * To run a mutation, you first call `useCreateCommentMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateCommentMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createCommentMutation, { data, loading, error }] = useCreateCommentMutation({\n *   variables: {\n *      text: // value for 'text'\n *      quiz_id: // value for 'quiz_id'\n *   },\n * });\n */\nexport function useCreateCommentMutation(baseOptions?: Apollo.MutationHookOptions<CreateCommentMutation, CreateCommentMutationVariables>) {\n        return Apollo.useMutation<CreateCommentMutation, CreateCommentMutationVariables>(CreateCommentDocument, baseOptions);\n      }\nexport type CreateCommentMutationHookResult = ReturnType<typeof useCreateCommentMutation>;\nexport type CreateCommentMutationResult = Apollo.MutationResult<CreateCommentMutation>;\nexport type CreateCommentMutationOptions = Apollo.BaseMutationOptions<CreateCommentMutation, CreateCommentMutationVariables>;\nexport const CreateQuizDocument = gql`\n    mutation CreateQuiz($title: String!, $description: String!, $quiz_photo: String, $questions: [QuestionInput!]!) {\n  createQuiz(\n    data: {title: $title, description: $description, quiz_photo: $quiz_photo, questions: $questions}\n  ) {\n    title\n    description\n    quiz_photo\n    questions {\n      question_id\n      question\n      question_photo\n      choices\n      answer\n      explanation\n      with_explanation\n      hint\n      with_hint\n    }\n  }\n}\n    `;\nexport type CreateQuizMutationFn = Apollo.MutationFunction<CreateQuizMutation, CreateQuizMutationVariables>;\n\n/**\n * __useCreateQuizMutation__\n *\n * To run a mutation, you first call `useCreateQuizMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateQuizMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createQuizMutation, { data, loading, error }] = useCreateQuizMutation({\n *   variables: {\n *      title: // value for 'title'\n *      description: // value for 'description'\n *      quiz_photo: // value for 'quiz_photo'\n *      questions: // value for 'questions'\n *   },\n * });\n */\nexport function useCreateQuizMutation(baseOptions?: Apollo.MutationHookOptions<CreateQuizMutation, CreateQuizMutationVariables>) {\n        return Apollo.useMutation<CreateQuizMutation, CreateQuizMutationVariables>(CreateQuizDocument, baseOptions);\n      }\nexport type CreateQuizMutationHookResult = ReturnType<typeof useCreateQuizMutation>;\nexport type CreateQuizMutationResult = Apollo.MutationResult<CreateQuizMutation>;\nexport type CreateQuizMutationOptions = Apollo.BaseMutationOptions<CreateQuizMutation, CreateQuizMutationVariables>;\nexport const DeleteQuizDocument = gql`\n    mutation DeleteQuiz($quiz_id: Int!) {\n  deleteQuiz(quiz_id: $quiz_id)\n}\n    `;\nexport type DeleteQuizMutationFn = Apollo.MutationFunction<DeleteQuizMutation, DeleteQuizMutationVariables>;\n\n/**\n * __useDeleteQuizMutation__\n *\n * To run a mutation, you first call `useDeleteQuizMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteQuizMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteQuizMutation, { data, loading, error }] = useDeleteQuizMutation({\n *   variables: {\n *      quiz_id: // value for 'quiz_id'\n *   },\n * });\n */\nexport function useDeleteQuizMutation(baseOptions?: Apollo.MutationHookOptions<DeleteQuizMutation, DeleteQuizMutationVariables>) {\n        return Apollo.useMutation<DeleteQuizMutation, DeleteQuizMutationVariables>(DeleteQuizDocument, baseOptions);\n      }\nexport type DeleteQuizMutationHookResult = ReturnType<typeof useDeleteQuizMutation>;\nexport type DeleteQuizMutationResult = Apollo.MutationResult<DeleteQuizMutation>;\nexport type DeleteQuizMutationOptions = Apollo.BaseMutationOptions<DeleteQuizMutation, DeleteQuizMutationVariables>;\nexport const LoginDocument = gql`\n    mutation Login($emailOrUsername: String!, $password: String!) {\n  login(data: {emailOrUsername: $emailOrUsername, password: $password}) {\n    ...UserResponse\n  }\n}\n    ${UserResponseFragmentDoc}`;\nexport type LoginMutationFn = Apollo.MutationFunction<LoginMutation, LoginMutationVariables>;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      emailOrUsername: // value for 'emailOrUsername'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions?: Apollo.MutationHookOptions<LoginMutation, LoginMutationVariables>) {\n        return Apollo.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, baseOptions);\n      }\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = Apollo.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = Apollo.BaseMutationOptions<LoginMutation, LoginMutationVariables>;\nexport const LogoutDocument = gql`\n    mutation Logout {\n  logout\n}\n    `;\nexport type LogoutMutationFn = Apollo.MutationFunction<LogoutMutation, LogoutMutationVariables>;\n\n/**\n * __useLogoutMutation__\n *\n * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLogoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [logoutMutation, { data, loading, error }] = useLogoutMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useLogoutMutation(baseOptions?: Apollo.MutationHookOptions<LogoutMutation, LogoutMutationVariables>) {\n        return Apollo.useMutation<LogoutMutation, LogoutMutationVariables>(LogoutDocument, baseOptions);\n      }\nexport type LogoutMutationHookResult = ReturnType<typeof useLogoutMutation>;\nexport type LogoutMutationResult = Apollo.MutationResult<LogoutMutation>;\nexport type LogoutMutationOptions = Apollo.BaseMutationOptions<LogoutMutation, LogoutMutationVariables>;\nexport const RegisterDocument = gql`\n    mutation Register($username: String!, $email: String!, $password: String!, $confirm_password: String!, $first_name: String!, $last_name: String!, $year: String!, $month: String!, $day: String!, $gender: String!) {\n  register(\n    data: {username: $username, email: $email, password: $password, confirm_password: $confirm_password, first_name: $first_name, last_name: $last_name, year: $year, month: $month, day: $day, gender: $gender}\n  ) {\n    ...UserResponse\n  }\n}\n    ${UserResponseFragmentDoc}`;\nexport type RegisterMutationFn = Apollo.MutationFunction<RegisterMutation, RegisterMutationVariables>;\n\n/**\n * __useRegisterMutation__\n *\n * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerMutation, { data, loading, error }] = useRegisterMutation({\n *   variables: {\n *      username: // value for 'username'\n *      email: // value for 'email'\n *      password: // value for 'password'\n *      confirm_password: // value for 'confirm_password'\n *      first_name: // value for 'first_name'\n *      last_name: // value for 'last_name'\n *      year: // value for 'year'\n *      month: // value for 'month'\n *      day: // value for 'day'\n *      gender: // value for 'gender'\n *   },\n * });\n */\nexport function useRegisterMutation(baseOptions?: Apollo.MutationHookOptions<RegisterMutation, RegisterMutationVariables>) {\n        return Apollo.useMutation<RegisterMutation, RegisterMutationVariables>(RegisterDocument, baseOptions);\n      }\nexport type RegisterMutationHookResult = ReturnType<typeof useRegisterMutation>;\nexport type RegisterMutationResult = Apollo.MutationResult<RegisterMutation>;\nexport type RegisterMutationOptions = Apollo.BaseMutationOptions<RegisterMutation, RegisterMutationVariables>;\nexport const ToggleLikeDocument = gql`\n    mutation ToggleLike($quiz_id: Float!) {\n  toggleLike(quiz_id: $quiz_id)\n}\n    `;\nexport type ToggleLikeMutationFn = Apollo.MutationFunction<ToggleLikeMutation, ToggleLikeMutationVariables>;\n\n/**\n * __useToggleLikeMutation__\n *\n * To run a mutation, you first call `useToggleLikeMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useToggleLikeMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [toggleLikeMutation, { data, loading, error }] = useToggleLikeMutation({\n *   variables: {\n *      quiz_id: // value for 'quiz_id'\n *   },\n * });\n */\nexport function useToggleLikeMutation(baseOptions?: Apollo.MutationHookOptions<ToggleLikeMutation, ToggleLikeMutationVariables>) {\n        return Apollo.useMutation<ToggleLikeMutation, ToggleLikeMutationVariables>(ToggleLikeDocument, baseOptions);\n      }\nexport type ToggleLikeMutationHookResult = ReturnType<typeof useToggleLikeMutation>;\nexport type ToggleLikeMutationResult = Apollo.MutationResult<ToggleLikeMutation>;\nexport type ToggleLikeMutationOptions = Apollo.BaseMutationOptions<ToggleLikeMutation, ToggleLikeMutationVariables>;\nexport const UpdateAccountDocument = gql`\n    mutation UpdateAccount($data: UpdateAccountInput!) {\n  updateAccount(data: $data) {\n    ...UserResponse\n  }\n}\n    ${UserResponseFragmentDoc}`;\nexport type UpdateAccountMutationFn = Apollo.MutationFunction<UpdateAccountMutation, UpdateAccountMutationVariables>;\n\n/**\n * __useUpdateAccountMutation__\n *\n * To run a mutation, you first call `useUpdateAccountMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateAccountMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateAccountMutation, { data, loading, error }] = useUpdateAccountMutation({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useUpdateAccountMutation(baseOptions?: Apollo.MutationHookOptions<UpdateAccountMutation, UpdateAccountMutationVariables>) {\n        return Apollo.useMutation<UpdateAccountMutation, UpdateAccountMutationVariables>(UpdateAccountDocument, baseOptions);\n      }\nexport type UpdateAccountMutationHookResult = ReturnType<typeof useUpdateAccountMutation>;\nexport type UpdateAccountMutationResult = Apollo.MutationResult<UpdateAccountMutation>;\nexport type UpdateAccountMutationOptions = Apollo.BaseMutationOptions<UpdateAccountMutation, UpdateAccountMutationVariables>;\nexport const UpdateProfileDocument = gql`\n    mutation UpdateProfile($data: UpdateProfileInput!) {\n  updateProfile(data: $data) {\n    ...UserResponse\n  }\n}\n    ${UserResponseFragmentDoc}`;\nexport type UpdateProfileMutationFn = Apollo.MutationFunction<UpdateProfileMutation, UpdateProfileMutationVariables>;\n\n/**\n * __useUpdateProfileMutation__\n *\n * To run a mutation, you first call `useUpdateProfileMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateProfileMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateProfileMutation, { data, loading, error }] = useUpdateProfileMutation({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useUpdateProfileMutation(baseOptions?: Apollo.MutationHookOptions<UpdateProfileMutation, UpdateProfileMutationVariables>) {\n        return Apollo.useMutation<UpdateProfileMutation, UpdateProfileMutationVariables>(UpdateProfileDocument, baseOptions);\n      }\nexport type UpdateProfileMutationHookResult = ReturnType<typeof useUpdateProfileMutation>;\nexport type UpdateProfileMutationResult = Apollo.MutationResult<UpdateProfileMutation>;\nexport type UpdateProfileMutationOptions = Apollo.BaseMutationOptions<UpdateProfileMutation, UpdateProfileMutationVariables>;\nexport const UpdateQuizDocument = gql`\n    mutation UpdateQuiz($inputs: QuizInput!, $quiz_id: Float!) {\n  updateQuiz(inputs: $inputs, quiz_id: $quiz_id) {\n    title\n    description\n    quiz_photo\n    questions {\n      question_id\n      question\n      question_photo\n      choices\n      answer\n      explanation\n      with_explanation\n      hint\n      with_hint\n    }\n  }\n}\n    `;\nexport type UpdateQuizMutationFn = Apollo.MutationFunction<UpdateQuizMutation, UpdateQuizMutationVariables>;\n\n/**\n * __useUpdateQuizMutation__\n *\n * To run a mutation, you first call `useUpdateQuizMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateQuizMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateQuizMutation, { data, loading, error }] = useUpdateQuizMutation({\n *   variables: {\n *      inputs: // value for 'inputs'\n *      quiz_id: // value for 'quiz_id'\n *   },\n * });\n */\nexport function useUpdateQuizMutation(baseOptions?: Apollo.MutationHookOptions<UpdateQuizMutation, UpdateQuizMutationVariables>) {\n        return Apollo.useMutation<UpdateQuizMutation, UpdateQuizMutationVariables>(UpdateQuizDocument, baseOptions);\n      }\nexport type UpdateQuizMutationHookResult = ReturnType<typeof useUpdateQuizMutation>;\nexport type UpdateQuizMutationResult = Apollo.MutationResult<UpdateQuizMutation>;\nexport type UpdateQuizMutationOptions = Apollo.BaseMutationOptions<UpdateQuizMutation, UpdateQuizMutationVariables>;\nexport const CommentsDocument = gql`\n    query Comments($limit: Int!, $cursor: String, $quiz_id: Int!) {\n  comments(limit: $limit, cursor: $cursor, quiz_id: $quiz_id) {\n    hasMore\n    comments {\n      ...CommentResponse\n    }\n  }\n}\n    ${CommentResponseFragmentDoc}`;\n\n/**\n * __useCommentsQuery__\n *\n * To run a query within a React component, call `useCommentsQuery` and pass it any options that fit your needs.\n * When your component renders, `useCommentsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCommentsQuery({\n *   variables: {\n *      limit: // value for 'limit'\n *      cursor: // value for 'cursor'\n *      quiz_id: // value for 'quiz_id'\n *   },\n * });\n */\nexport function useCommentsQuery(baseOptions: Apollo.QueryHookOptions<CommentsQuery, CommentsQueryVariables>) {\n        return Apollo.useQuery<CommentsQuery, CommentsQueryVariables>(CommentsDocument, baseOptions);\n      }\nexport function useCommentsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CommentsQuery, CommentsQueryVariables>) {\n          return Apollo.useLazyQuery<CommentsQuery, CommentsQueryVariables>(CommentsDocument, baseOptions);\n        }\nexport type CommentsQueryHookResult = ReturnType<typeof useCommentsQuery>;\nexport type CommentsLazyQueryHookResult = ReturnType<typeof useCommentsLazyQuery>;\nexport type CommentsQueryResult = Apollo.QueryResult<CommentsQuery, CommentsQueryVariables>;\nexport const MeDocument = gql`\n    query Me {\n  me {\n    ...UserResponse\n  }\n}\n    ${UserResponseFragmentDoc}`;\n\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMeQuery(baseOptions?: Apollo.QueryHookOptions<MeQuery, MeQueryVariables>) {\n        return Apollo.useQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n      }\nexport function useMeLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MeQuery, MeQueryVariables>) {\n          return Apollo.useLazyQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n        }\nexport type MeQueryHookResult = ReturnType<typeof useMeQuery>;\nexport type MeLazyQueryHookResult = ReturnType<typeof useMeLazyQuery>;\nexport type MeQueryResult = Apollo.QueryResult<MeQuery, MeQueryVariables>;\nexport const MeQuizzesDocument = gql`\n    query MeQuizzes($limit: Int!, $cursor: String) {\n  meQuizzes(limit: $limit, cursor: $cursor) {\n    meHasMore\n    meQuizzes {\n      ...QuizzesResponse\n    }\n  }\n}\n    ${QuizzesResponseFragmentDoc}`;\n\n/**\n * __useMeQuizzesQuery__\n *\n * To run a query within a React component, call `useMeQuizzesQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuizzesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuizzesQuery({\n *   variables: {\n *      limit: // value for 'limit'\n *      cursor: // value for 'cursor'\n *   },\n * });\n */\nexport function useMeQuizzesQuery(baseOptions: Apollo.QueryHookOptions<MeQuizzesQuery, MeQuizzesQueryVariables>) {\n        return Apollo.useQuery<MeQuizzesQuery, MeQuizzesQueryVariables>(MeQuizzesDocument, baseOptions);\n      }\nexport function useMeQuizzesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MeQuizzesQuery, MeQuizzesQueryVariables>) {\n          return Apollo.useLazyQuery<MeQuizzesQuery, MeQuizzesQueryVariables>(MeQuizzesDocument, baseOptions);\n        }\nexport type MeQuizzesQueryHookResult = ReturnType<typeof useMeQuizzesQuery>;\nexport type MeQuizzesLazyQueryHookResult = ReturnType<typeof useMeQuizzesLazyQuery>;\nexport type MeQuizzesQueryResult = Apollo.QueryResult<MeQuizzesQuery, MeQuizzesQueryVariables>;\nexport const QuestionsDocument = gql`\n    query Questions($quiz_id: Int!, $withAnswer: Boolean!) {\n  questions(quiz_id: $quiz_id) {\n    question_id\n    question\n    question_photo\n    choices\n    hint\n    with_hint\n    answer @include(if: $withAnswer)\n  }\n}\n    `;\n\n/**\n * __useQuestionsQuery__\n *\n * To run a query within a React component, call `useQuestionsQuery` and pass it any options that fit your needs.\n * When your component renders, `useQuestionsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useQuestionsQuery({\n *   variables: {\n *      quiz_id: // value for 'quiz_id'\n *      withAnswer: // value for 'withAnswer'\n *   },\n * });\n */\nexport function useQuestionsQuery(baseOptions: Apollo.QueryHookOptions<QuestionsQuery, QuestionsQueryVariables>) {\n        return Apollo.useQuery<QuestionsQuery, QuestionsQueryVariables>(QuestionsDocument, baseOptions);\n      }\nexport function useQuestionsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<QuestionsQuery, QuestionsQueryVariables>) {\n          return Apollo.useLazyQuery<QuestionsQuery, QuestionsQueryVariables>(QuestionsDocument, baseOptions);\n        }\nexport type QuestionsQueryHookResult = ReturnType<typeof useQuestionsQuery>;\nexport type QuestionsLazyQueryHookResult = ReturnType<typeof useQuestionsLazyQuery>;\nexport type QuestionsQueryResult = Apollo.QueryResult<QuestionsQuery, QuestionsQueryVariables>;\nexport const QuizToUpdateDocument = gql`\n    query QuizToUpdate($quiz_id: Int!) {\n  quizToUpdate(quiz_id: $quiz_id) {\n    title\n    description\n    quiz_photo\n    questions {\n      question_id\n      question\n      question_photo\n      choices\n      answer\n      explanation\n      with_explanation\n      hint\n      with_hint\n    }\n  }\n}\n    `;\n\n/**\n * __useQuizToUpdateQuery__\n *\n * To run a query within a React component, call `useQuizToUpdateQuery` and pass it any options that fit your needs.\n * When your component renders, `useQuizToUpdateQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useQuizToUpdateQuery({\n *   variables: {\n *      quiz_id: // value for 'quiz_id'\n *   },\n * });\n */\nexport function useQuizToUpdateQuery(baseOptions: Apollo.QueryHookOptions<QuizToUpdateQuery, QuizToUpdateQueryVariables>) {\n        return Apollo.useQuery<QuizToUpdateQuery, QuizToUpdateQueryVariables>(QuizToUpdateDocument, baseOptions);\n      }\nexport function useQuizToUpdateLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<QuizToUpdateQuery, QuizToUpdateQueryVariables>) {\n          return Apollo.useLazyQuery<QuizToUpdateQuery, QuizToUpdateQueryVariables>(QuizToUpdateDocument, baseOptions);\n        }\nexport type QuizToUpdateQueryHookResult = ReturnType<typeof useQuizToUpdateQuery>;\nexport type QuizToUpdateLazyQueryHookResult = ReturnType<typeof useQuizToUpdateLazyQuery>;\nexport type QuizToUpdateQueryResult = Apollo.QueryResult<QuizToUpdateQuery, QuizToUpdateQueryVariables>;\nexport const QuizzesDocument = gql`\n    query Quizzes($limit: Int!, $cursor: String) {\n  quizzes(limit: $limit, cursor: $cursor) {\n    hasMore\n    quizzes {\n      ...QuizzesResponse\n    }\n  }\n}\n    ${QuizzesResponseFragmentDoc}`;\n\n/**\n * __useQuizzesQuery__\n *\n * To run a query within a React component, call `useQuizzesQuery` and pass it any options that fit your needs.\n * When your component renders, `useQuizzesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useQuizzesQuery({\n *   variables: {\n *      limit: // value for 'limit'\n *      cursor: // value for 'cursor'\n *   },\n * });\n */\nexport function useQuizzesQuery(baseOptions: Apollo.QueryHookOptions<QuizzesQuery, QuizzesQueryVariables>) {\n        return Apollo.useQuery<QuizzesQuery, QuizzesQueryVariables>(QuizzesDocument, baseOptions);\n      }\nexport function useQuizzesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<QuizzesQuery, QuizzesQueryVariables>) {\n          return Apollo.useLazyQuery<QuizzesQuery, QuizzesQueryVariables>(QuizzesDocument, baseOptions);\n        }\nexport type QuizzesQueryHookResult = ReturnType<typeof useQuizzesQuery>;\nexport type QuizzesLazyQueryHookResult = ReturnType<typeof useQuizzesLazyQuery>;\nexport type QuizzesQueryResult = Apollo.QueryResult<QuizzesQuery, QuizzesQueryVariables>;\nexport const SingleQuizDocument = gql`\n    query SingleQuiz($quiz_id: Int!) {\n  singleQuiz(quiz_id: $quiz_id) {\n    id\n    quiz_photo\n    title\n    description\n    author {\n      id\n      username\n      avatar\n      email\n      profile {\n        name\n      }\n    }\n    isLiked\n    likesCount\n    commentsCount\n    created_at\n    questionsCount\n    takersCount\n    isTaken\n  }\n}\n    `;\n\n/**\n * __useSingleQuizQuery__\n *\n * To run a query within a React component, call `useSingleQuizQuery` and pass it any options that fit your needs.\n * When your component renders, `useSingleQuizQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useSingleQuizQuery({\n *   variables: {\n *      quiz_id: // value for 'quiz_id'\n *   },\n * });\n */\nexport function useSingleQuizQuery(baseOptions: Apollo.QueryHookOptions<SingleQuizQuery, SingleQuizQueryVariables>) {\n        return Apollo.useQuery<SingleQuizQuery, SingleQuizQueryVariables>(SingleQuizDocument, baseOptions);\n      }\nexport function useSingleQuizLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SingleQuizQuery, SingleQuizQueryVariables>) {\n          return Apollo.useLazyQuery<SingleQuizQuery, SingleQuizQueryVariables>(SingleQuizDocument, baseOptions);\n        }\nexport type SingleQuizQueryHookResult = ReturnType<typeof useSingleQuizQuery>;\nexport type SingleQuizLazyQueryHookResult = ReturnType<typeof useSingleQuizLazyQuery>;\nexport type SingleQuizQueryResult = Apollo.QueryResult<SingleQuizQuery, SingleQuizQueryVariables>;"]},"metadata":{},"sourceType":"module"}
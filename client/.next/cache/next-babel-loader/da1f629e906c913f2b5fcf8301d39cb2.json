{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\mj\\\\Documents\\\\Codes\\\\PROJECTS\\\\quizshare-typescript\\\\client\\\\src\\\\components\\\\custom-inputs\\\\MainInputUI.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { WarningIcon } from '@chakra-ui/icons';\nimport { FormControl, FormLabel, Input, InputGroup, InputRightElement, Tooltip, FormHelperText, FormErrorMessage } from '@chakra-ui/react';\nimport React from 'react';\n\nconst MainInputUI = (_ref) => {\n  let {\n    error,\n    input,\n    name,\n    register,\n    type,\n    forDashboard,\n    helperText,\n    errorMessage,\n    placeholder,\n    defaultValue\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"error\", \"input\", \"name\", \"register\", \"type\", \"forDashboard\", \"helperText\", \"errorMessage\", \"placeholder\", \"defaultValue\"]);\n\n  return /*#__PURE__*/_jsxDEV(FormControl, {\n    id: input,\n    isInvalid: !!error,\n    children: [forDashboard ? /*#__PURE__*/_jsxDEV(FormLabel, {\n      as: \"p\",\n      fontWeight: \"semibold\",\n      children: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }, this) : /*#__PURE__*/_jsxDEV(FormLabel, {\n      children: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(InputGroup, {\n      size: \"lg\",\n      children: [/*#__PURE__*/_jsxDEV(Input, _objectSpread({\n        name: input,\n        placeholder: placeholder || name,\n        ref: register,\n        isInvalid: !!error,\n        type: type,\n        focusBorderColor: \"purple.500\",\n        defaultValue: defaultValue || ''\n      }, props), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 5\n      }, this), error && /*#__PURE__*/_jsxDEV(InputRightElement, {\n        children: /*#__PURE__*/_jsxDEV(Tooltip, {\n          hasArrow: true,\n          label: error === null || error === void 0 ? void 0 : error.message,\n          bg: \"red.500\",\n          children: /*#__PURE__*/_jsxDEV(WarningIcon, {\n            color: \"red.500\",\n            fontSize: \"20px\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 8\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 4\n    }, this), helperText === null || helperText === void 0 ? void 0 : helperText.map((text, i) => /*#__PURE__*/_jsxDEV(FormHelperText, {\n      children: text\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }, this)), error && errorMessage && /*#__PURE__*/_jsxDEV(FormErrorMessage, {\n      mt: \"0\",\n      children: `${errorMessage[0].toUpperCase()}${errorMessage.slice(1)}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 3\n  }, this);\n};\n\nexport default MainInputUI;","map":{"version":3,"sources":["C:/Users/mj/Documents/Codes/PROJECTS/quizshare-typescript/client/src/components/custom-inputs/MainInputUI.tsx"],"names":["WarningIcon","FormControl","FormLabel","Input","InputGroup","InputRightElement","Tooltip","FormHelperText","FormErrorMessage","React","MainInputUI","error","input","name","register","type","forDashboard","helperText","errorMessage","placeholder","defaultValue","props","message","map","text","i","toUpperCase","slice"],"mappings":";;;;;;;;;;;;;AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SACCC,WADD,EAECC,SAFD,EAGCC,KAHD,EAICC,UAJD,EAKCC,iBALD,EAMCC,OAND,EAOCC,cAPD,EAQCC,gBARD,QAUO,kBAVP;AAWA,OAAOC,KAAP,MAAkB,OAAlB;;AAgBA,MAAMC,WAAuC,GAAG,UAY1C;AAAA,MAZ2C;AAChDC,IAAAA,KADgD;AAEhDC,IAAAA,KAFgD;AAGhDC,IAAAA,IAHgD;AAIhDC,IAAAA,QAJgD;AAKhDC,IAAAA,IALgD;AAMhDC,IAAAA,YANgD;AAOhDC,IAAAA,UAPgD;AAQhDC,IAAAA,YARgD;AAShDC,IAAAA,WATgD;AAUhDC,IAAAA;AAVgD,GAY3C;AAAA,MADFC,KACE;;AACL,sBACC,QAAC,WAAD;AAAa,IAAA,EAAE,EAAET,KAAjB;AAAwB,IAAA,SAAS,EAAE,CAAC,CAACD,KAArC;AAAA,eACEK,YAAY,gBACZ,QAAC,SAAD;AAAW,MAAA,EAAE,EAAC,GAAd;AAAkB,MAAA,UAAU,EAAC,UAA7B;AAAA,gBACEH;AADF;AAAA;AAAA;AAAA;AAAA,YADY,gBAKZ,QAAC,SAAD;AAAA,gBAAYA;AAAZ;AAAA;AAAA;AAAA;AAAA,YANF,eAQC,QAAC,UAAD;AAAY,MAAA,IAAI,EAAC,IAAjB;AAAA,8BACC,QAAC,KAAD;AACC,QAAA,IAAI,EAAED,KADP;AAEC,QAAA,WAAW,EAAEO,WAAW,IAAIN,IAF7B;AAGC,QAAA,GAAG,EAAEC,QAHN;AAIC,QAAA,SAAS,EAAE,CAAC,CAACH,KAJd;AAKC,QAAA,IAAI,EAAEI,IALP;AAMC,QAAA,gBAAgB,EAAC,YANlB;AAOC,QAAA,YAAY,EAAEK,YAAY,IAAI;AAP/B,SAQKC,KARL;AAAA;AAAA;AAAA;AAAA,cADD,EAWEV,KAAK,iBACL,QAAC,iBAAD;AAAA,+BACC,QAAC,OAAD;AAAS,UAAA,QAAQ,MAAjB;AAAkB,UAAA,KAAK,EAAEA,KAAF,aAAEA,KAAF,uBAAEA,KAAK,CAAEW,OAAhC;AAAyC,UAAA,EAAE,EAAC,SAA5C;AAAA,iCACC,QAAC,WAAD;AAAa,YAAA,KAAK,EAAC,SAAnB;AAA6B,YAAA,QAAQ,EAAC;AAAtC;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,cAZF;AAAA;AAAA;AAAA;AAAA;AAAA,YARD,EA2BEL,UA3BF,aA2BEA,UA3BF,uBA2BEA,UAAU,CAAEM,GAAZ,CAAgB,CAACC,IAAD,EAAOC,CAAP,kBAChB,QAAC,cAAD;AAAA,gBAAyBD;AAAzB,OAAqBC,CAArB;AAAA;AAAA;AAAA;AAAA,YADA,CA3BF,EA8BEd,KAAK,IAAIO,YAAT,iBACA,QAAC,gBAAD;AAAkB,MAAA,EAAE,EAAC,GAArB;AAAA,gBACG,GAAEA,YAAY,CAAC,CAAD,CAAZ,CAAgBQ,WAAhB,EAA8B,GAAER,YAAY,CAACS,KAAb,CAAmB,CAAnB,CAAsB;AAD3D;AAAA;AAAA;AAAA;AAAA,YA/BF;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAsCA,CAnDD;;AAqDA,eAAejB,WAAf","sourcesContent":["import { WarningIcon } from '@chakra-ui/icons';\r\nimport {\r\n\tFormControl,\r\n\tFormLabel,\r\n\tInput,\r\n\tInputGroup,\r\n\tInputRightElement,\r\n\tTooltip,\r\n\tFormHelperText,\r\n\tFormErrorMessage,\r\n\tInputProps,\r\n} from '@chakra-ui/react';\r\nimport React from 'react';\r\nimport { FieldError } from 'react-hook-form';\r\n\r\ntype MainInputUIProps = {\r\n\terror?: FieldError | undefined;\r\n\tinput: string;\r\n\tname: string;\r\n\tregister: any;\r\n\ttype: string;\r\n\tforDashboard?: boolean;\r\n\thelperText?: string[];\r\n\terrorMessage?: string;\r\n\tplaceholder?: string;\r\n\tdefaultValue?: string;\r\n} & InputProps;\r\n\r\nconst MainInputUI: React.FC<MainInputUIProps> = ({\r\n\terror,\r\n\tinput,\r\n\tname,\r\n\tregister,\r\n\ttype,\r\n\tforDashboard,\r\n\thelperText,\r\n\terrorMessage,\r\n\tplaceholder,\r\n\tdefaultValue,\r\n\t...props\r\n}) => {\r\n\treturn (\r\n\t\t<FormControl id={input} isInvalid={!!error}>\r\n\t\t\t{forDashboard ? (\r\n\t\t\t\t<FormLabel as='p' fontWeight='semibold'>\r\n\t\t\t\t\t{name}\r\n\t\t\t\t</FormLabel>\r\n\t\t\t) : (\r\n\t\t\t\t<FormLabel>{name}</FormLabel>\r\n\t\t\t)}\r\n\t\t\t<InputGroup size='lg'>\r\n\t\t\t\t<Input\r\n\t\t\t\t\tname={input}\r\n\t\t\t\t\tplaceholder={placeholder || name}\r\n\t\t\t\t\tref={register}\r\n\t\t\t\t\tisInvalid={!!error}\r\n\t\t\t\t\ttype={type}\r\n\t\t\t\t\tfocusBorderColor='purple.500'\r\n\t\t\t\t\tdefaultValue={defaultValue || ''}\r\n\t\t\t\t\t{...props}\r\n\t\t\t\t/>\r\n\t\t\t\t{error && (\r\n\t\t\t\t\t<InputRightElement>\r\n\t\t\t\t\t\t<Tooltip hasArrow label={error?.message} bg='red.500'>\r\n\t\t\t\t\t\t\t<WarningIcon color='red.500' fontSize='20px' />\r\n\t\t\t\t\t\t</Tooltip>\r\n\t\t\t\t\t</InputRightElement>\r\n\t\t\t\t)}\r\n\t\t\t</InputGroup>\r\n\t\t\t{helperText?.map((text, i) => (\r\n\t\t\t\t<FormHelperText key={i}>{text}</FormHelperText>\r\n\t\t\t))}\r\n\t\t\t{error && errorMessage && (\r\n\t\t\t\t<FormErrorMessage mt='0'>\r\n\t\t\t\t\t{`${errorMessage[0].toUpperCase()}${errorMessage.slice(1)}`}\r\n\t\t\t\t</FormErrorMessage>\r\n\t\t\t)}\r\n\t\t</FormControl>\r\n\t);\r\n};\r\n\r\nexport default MainInputUI;\r\n"]},"metadata":{},"sourceType":"module"}
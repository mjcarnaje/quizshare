{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\nimport { createWithApollo } from './createWithApollo';\nimport { isServer } from './isServer';\n\nvar createClient = function createClient(ctx) {\n  var _ctx$req;\n\n  return new ApolloClient({\n    uri: process.env.NEXT_PUBLIC_API_URL,\n    credentials: 'include',\n    headers: {\n      cookie: (isServer() ? ctx === null || ctx === void 0 ? void 0 : (_ctx$req = ctx.req) === null || _ctx$req === void 0 ? void 0 : _ctx$req.headers.cookie : undefined) || ''\n    },\n    cache: new InMemoryCache({\n      typePolicies: {\n        Query: {\n          fields: {\n            quizzes: {\n              keyArgs: [],\n              merge: function merge(existing, incoming) {\n                return _objectSpread(_objectSpread({}, incoming), {}, {\n                  quizzes: [].concat(_toConsumableArray((existing === null || existing === void 0 ? void 0 : existing.quizzes) || []), _toConsumableArray(incoming.quizzes))\n                });\n              }\n            },\n            meQuizzes: {\n              keyArgs: [],\n              merge: function merge(existing, incoming) {\n                return _objectSpread(_objectSpread({}, incoming), {}, {\n                  meQuizzes: [].concat(_toConsumableArray((existing === null || existing === void 0 ? void 0 : existing.meQuizzes) || []), _toConsumableArray(incoming.meQuizzes))\n                });\n              }\n            },\n            comments: {\n              keyArgs: ['quiz_id'],\n              merge: function merge(existing, incoming) {\n                return _objectSpread(_objectSpread({}, incoming), {}, {\n                  comments: [].concat(_toConsumableArray((existing === null || existing === void 0 ? void 0 : existing.comments) || []), _toConsumableArray(incoming.comments))\n                });\n              }\n            }\n          }\n        }\n      }\n    }),\n    connectToDevTools: true\n  });\n};\n\nexport var withApollo = createWithApollo(createClient);","map":{"version":3,"sources":["C:/Users/mj/Documents/Codes/PROJECTS/quizshare-typescript/client/src/utils/withApollo.ts"],"names":["ApolloClient","InMemoryCache","createWithApollo","isServer","createClient","ctx","uri","process","env","NEXT_PUBLIC_API_URL","credentials","headers","cookie","req","undefined","cache","typePolicies","Query","fields","quizzes","keyArgs","merge","existing","incoming","meQuizzes","comments","connectToDevTools","withApollo"],"mappings":";;;;;;;AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,gBAA5C;AAOA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SAASC,QAAT,QAAyB,YAAzB;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,GAAD;AAAA;;AAAA,SACpB,IAAIL,YAAJ,CAAiB;AAChBM,IAAAA,GAAG,EAAEC,OAAO,CAACC,GAAR,CAAYC,mBADD;AAEhBC,IAAAA,WAAW,EAAE,SAFG;AAGhBC,IAAAA,OAAO,EAAE;AACRC,MAAAA,MAAM,EAAE,CAACT,QAAQ,KAAKE,GAAL,aAAKA,GAAL,mCAAKA,GAAG,CAAEQ,GAAV,6CAAK,SAAUF,OAAV,CAAkBC,MAAvB,GAAgCE,SAAzC,KAAuD;AADvD,KAHO;AAMhBC,IAAAA,KAAK,EAAE,IAAId,aAAJ,CAAkB;AACxBe,MAAAA,YAAY,EAAE;AACbC,QAAAA,KAAK,EAAE;AACNC,UAAAA,MAAM,EAAE;AACPC,YAAAA,OAAO,EAAE;AACRC,cAAAA,OAAO,EAAE,EADD;AAERC,cAAAA,KAFQ,iBAGPC,QAHO,EAIPC,QAJO,EAKY;AACnB,uDACIA,QADJ;AAECJ,kBAAAA,OAAO,+BAAO,CAAAG,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEH,OAAV,KAAqB,EAA5B,sBAAoCI,QAAQ,CAACJ,OAA7C;AAFR;AAIA;AAVO,aADF;AAaPK,YAAAA,SAAS,EAAE;AACVJ,cAAAA,OAAO,EAAE,EADC;AAEVC,cAAAA,KAFU,iBAGTC,QAHS,EAITC,QAJS,EAKY;AACrB,uDACIA,QADJ;AAECC,kBAAAA,SAAS,+BACJ,CAAAF,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEE,SAAV,KAAuB,EADnB,sBAELD,QAAQ,CAACC,SAFJ;AAFV;AAOA;AAbS,aAbJ;AA4BPC,YAAAA,QAAQ,EAAE;AACTL,cAAAA,OAAO,EAAE,CAAC,SAAD,CADA;AAETC,cAAAA,KAFS,iBAGRC,QAHQ,EAIRC,QAJQ,EAKY;AACpB,uDACIA,QADJ;AAECE,kBAAAA,QAAQ,+BACH,CAAAH,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEG,QAAV,KAAsB,EADnB,sBAEJF,QAAQ,CAACE,QAFL;AAFT;AAOA;AAbQ;AA5BH;AADF;AADM;AADU,KAAlB,CANS;AAwDhBC,IAAAA,iBAAiB,EAAE;AAxDH,GAAjB,CADoB;AAAA,CAArB;;AA4DA,OAAO,IAAMC,UAAU,GAAGzB,gBAAgB,CAACE,YAAD,CAAnC","sourcesContent":["import { ApolloClient, InMemoryCache } from '@apollo/client';\r\nimport { NextPageContext } from 'next';\r\nimport {\r\n\tPaginatedComments,\r\n\tPaginatedMeQuizzes,\r\n\tPaginatedQuizzes,\r\n} from '../generated/graphql';\r\nimport { createWithApollo } from './createWithApollo';\r\nimport { isServer } from './isServer';\r\n\r\nconst createClient = (ctx: NextPageContext) =>\r\n\tnew ApolloClient({\r\n\t\turi: process.env.NEXT_PUBLIC_API_URL as string,\r\n\t\tcredentials: 'include',\r\n\t\theaders: {\r\n\t\t\tcookie: (isServer() ? ctx?.req?.headers.cookie : undefined) || '',\r\n\t\t},\r\n\t\tcache: new InMemoryCache({\r\n\t\t\ttypePolicies: {\r\n\t\t\t\tQuery: {\r\n\t\t\t\t\tfields: {\r\n\t\t\t\t\t\tquizzes: {\r\n\t\t\t\t\t\t\tkeyArgs: [],\r\n\t\t\t\t\t\t\tmerge(\r\n\t\t\t\t\t\t\t\texisting: PaginatedQuizzes | undefined,\r\n\t\t\t\t\t\t\t\tincoming: PaginatedQuizzes\r\n\t\t\t\t\t\t\t): PaginatedQuizzes {\r\n\t\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t\t...incoming,\r\n\t\t\t\t\t\t\t\t\tquizzes: [...(existing?.quizzes || []), ...incoming.quizzes],\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tmeQuizzes: {\r\n\t\t\t\t\t\t\tkeyArgs: [],\r\n\t\t\t\t\t\t\tmerge(\r\n\t\t\t\t\t\t\t\texisting: PaginatedMeQuizzes | undefined,\r\n\t\t\t\t\t\t\t\tincoming: PaginatedMeQuizzes\r\n\t\t\t\t\t\t\t): PaginatedMeQuizzes {\r\n\t\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t\t...incoming,\r\n\t\t\t\t\t\t\t\t\tmeQuizzes: [\r\n\t\t\t\t\t\t\t\t\t\t...(existing?.meQuizzes || []),\r\n\t\t\t\t\t\t\t\t\t\t...incoming.meQuizzes,\r\n\t\t\t\t\t\t\t\t\t],\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tcomments: {\r\n\t\t\t\t\t\t\tkeyArgs: ['quiz_id'],\r\n\t\t\t\t\t\t\tmerge(\r\n\t\t\t\t\t\t\t\texisting: PaginatedComments | undefined,\r\n\t\t\t\t\t\t\t\tincoming: PaginatedComments\r\n\t\t\t\t\t\t\t): PaginatedComments {\r\n\t\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t\t...incoming,\r\n\t\t\t\t\t\t\t\t\tcomments: [\r\n\t\t\t\t\t\t\t\t\t\t...(existing?.comments || []),\r\n\t\t\t\t\t\t\t\t\t\t...incoming.comments,\r\n\t\t\t\t\t\t\t\t\t],\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t}),\r\n\t\tconnectToDevTools: true,\r\n\t});\r\n\r\nexport const withApollo = createWithApollo(createClient);\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\mj\\\\Documents\\\\Codes\\\\PROJECTS\\\\quizshare-typescript\\\\client\\\\src\\\\pages\\\\index.tsx\";\nimport { Button, useColorModeValue } from '@chakra-ui/react';\nimport React from 'react';\nimport { QuizBox } from '../components/QuizBox';\nimport { QuizBoxLoading } from '../components/QuizBoxLoading';\nimport { useQuizzesQuery } from '../generated/graphql';\nimport { MainContainer } from '../layouts/MainContainer';\nimport { useIsAuth } from '../utils/useIsAuth';\nimport { withApollo } from '../utils/withApollo';\n\nconst Index = () => {\n  const buttonColorScheme = useColorModeValue('purple', 'gray');\n  useIsAuth();\n  const {\n    data,\n    loading,\n    fetchMore,\n    variables,\n    error\n  } = useQuizzesQuery({\n    variables: {\n      limit: 4,\n      cursor: null\n    },\n    notifyOnNetworkStatusChange: true\n  });\n\n  if (!data && loading) {\n    return /*#__PURE__*/_jsxDEV(MainContainer, {\n      display: \"grid\",\n      justifyItems: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(QuizBoxLoading, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(QuizBoxLoading, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(QuizBoxLoading, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 4\n    }, this);\n  }\n\n  if (!loading && !data) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"you got query failed for some reason\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: error === null || error === void 0 ? void 0 : error.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 4\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(MainContainer, {\n    display: \"grid\",\n    justifyItems: \"center\",\n    children: [data === null || data === void 0 ? void 0 : data.quizzes.quizzes.map(quiz => {\n      return /*#__PURE__*/_jsxDEV(QuizBox, {\n        quiz: quiz\n      }, quiz.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 12\n      }, this);\n    }), loading && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(QuizBoxLoading, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(QuizBoxLoading, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true), data && data.quizzes.hasMore && /*#__PURE__*/_jsxDEV(Button, {\n      size: \"sm\",\n      colorScheme: buttonColorScheme,\n      variant: \"ghost\",\n      fontSize: 16,\n      my: \"20px\",\n      onClick: () => fetchMore({\n        variables: {\n          limit: variables === null || variables === void 0 ? void 0 : variables.limit,\n          cursor: data.quizzes.quizzes[data.quizzes.quizzes.length - 1].created_at\n        }\n      }),\n      isLoading: loading,\n      children: \"Load more\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 3\n  }, this);\n};\n\nexport default withApollo({\n  ssr: true\n})(Index);","map":{"version":3,"sources":["C:/Users/mj/Documents/Codes/PROJECTS/quizshare-typescript/client/src/pages/index.tsx"],"names":["Button","useColorModeValue","React","QuizBox","QuizBoxLoading","useQuizzesQuery","MainContainer","useIsAuth","withApollo","Index","buttonColorScheme","data","loading","fetchMore","variables","error","limit","cursor","notifyOnNetworkStatusChange","message","quizzes","map","quiz","id","hasMore","length","created_at","ssr"],"mappings":"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","sourcesContent":["import { Button, useColorModeValue } from '@chakra-ui/react';\r\nimport React from 'react';\r\nimport { QuizBox } from '../components/QuizBox';\r\nimport { QuizBoxLoading } from '../components/QuizBoxLoading';\r\nimport { useQuizzesQuery } from '../generated/graphql';\r\nimport { MainContainer } from '../layouts/MainContainer';\r\nimport { useIsAuth } from '../utils/useIsAuth';\r\nimport { withApollo } from '../utils/withApollo';\r\n\r\nconst Index: React.FC = () => {\r\n\tconst buttonColorScheme = useColorModeValue('purple', 'gray');\r\n\r\n\tuseIsAuth();\r\n\r\n\tconst { data, loading, fetchMore, variables, error } = useQuizzesQuery({\r\n\t\tvariables: {\r\n\t\t\tlimit: 4,\r\n\t\t\tcursor: null,\r\n\t\t},\r\n\t\tnotifyOnNetworkStatusChange: true,\r\n\t});\r\n\r\n\tif (!data && loading) {\r\n\t\treturn (\r\n\t\t\t<MainContainer display='grid' justifyItems='center'>\r\n\t\t\t\t<QuizBoxLoading />\r\n\t\t\t\t<QuizBoxLoading />\r\n\t\t\t\t<QuizBoxLoading />\r\n\t\t\t</MainContainer>\r\n\t\t);\r\n\t}\r\n\r\n\tif (!loading && !data) {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<div>you got query failed for some reason</div>\r\n\t\t\t\t<div>{error?.message}</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<MainContainer display='grid' justifyItems='center'>\r\n\t\t\t{data?.quizzes.quizzes.map((quiz) => {\r\n\t\t\t\treturn <QuizBox key={quiz.id} quiz={quiz} />;\r\n\t\t\t})}\r\n\t\t\t{loading && (\r\n\t\t\t\t<>\r\n\t\t\t\t\t<QuizBoxLoading />\r\n\t\t\t\t\t<QuizBoxLoading />\r\n\t\t\t\t</>\r\n\t\t\t)}\r\n\t\t\t{data && data.quizzes.hasMore && (\r\n\t\t\t\t<Button\r\n\t\t\t\t\tsize='sm'\r\n\t\t\t\t\tcolorScheme={buttonColorScheme}\r\n\t\t\t\t\tvariant='ghost'\r\n\t\t\t\t\tfontSize={16}\r\n\t\t\t\t\tmy='20px'\r\n\t\t\t\t\tonClick={() =>\r\n\t\t\t\t\t\tfetchMore({\r\n\t\t\t\t\t\t\tvariables: {\r\n\t\t\t\t\t\t\t\tlimit: variables?.limit,\r\n\t\t\t\t\t\t\t\tcursor:\r\n\t\t\t\t\t\t\t\t\tdata.quizzes.quizzes[data.quizzes.quizzes.length - 1]\r\n\t\t\t\t\t\t\t\t\t\t.created_at,\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t\tisLoading={loading}\r\n\t\t\t\t>\r\n\t\t\t\t\tLoad more\r\n\t\t\t\t</Button>\r\n\t\t\t)}\r\n\t\t</MainContainer>\r\n\t);\r\n};\r\n\r\nexport default withApollo({ ssr: true })(Index);\r\n"]},"metadata":{},"sourceType":"module"}